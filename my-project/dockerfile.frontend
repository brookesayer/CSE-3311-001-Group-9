# Stage 1: Build the React application
# This stage uses Node.js to install dependencies and create a production-ready build.
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Stage 2: Serve the application using Nginx
# This stage takes the built files and serves them with a lightweight, production-grade web server.
FROM nginx:stable-alpine

# Copy the optimized static files from the build stage into the Nginx web root directory
COPY --from=build /app/dist /usr/share/nginx/html

# Explicitly remove the default Nginx configuration to prevent any conflicts
RUN rm /etc/nginx/conf.d/default.conf

# Copy our custom Nginx configuration (which includes the API proxy) into the config directory
COPY nginx.conf /etc/nginx/conf.d/

# Expose port 80, which is the default port for Nginx
EXPOSE 80

# Start the Nginx server in the foreground
CMD ["nginx", "-g", "daemon off;"]

